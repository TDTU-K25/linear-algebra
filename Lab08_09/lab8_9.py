# -*- coding: utf-8 -*-
"""Lab8_9.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VKmWc85XZc8NH-CUiH8-w5hQSe735ZEh

Exercise 1: To find the least square solution to Ax = b. For this case, the equation A^T * Ax = A^T * b with
"""

import numpy as np
A1 = np.array([ [2, 2], [2,3] ])
b1 = np.array([ [4], [6] ])

inv_A1 = np.linalg.inv(A1)
x = inv_A1.dot(b1)

print(x)

"""Exercise 2: Solve the linear system below and find the least squares solutions."""

import numpy as np
A2 = np.array([ [0,0,1], [0,1,1], [1,2,1], [1,0,1], [4,1,1], [4,2,1] ])
b2 = np.array([ [0.5], [1.6], [2.8], [0.8], [5.1], [5.9] ])

transpose_A2 = np.transpose(A2)
transpose_A2_mul_A2 = transpose_A2.dot(A2)

transpose_A2_mul_b2 = transpose_A2.dot(b2)

x = np.linalg.solve(transpose_A2_mul_A2, transpose_A2_mul_b2)
print(x)

"""Exercise 3: Find the equation y = a0 + a1x of the least squares line that best fits the given data points."""

import numpy as np
from sympy import *
from matplotlib import pyplot as plt

# Cách 1
A3a1 = np.array([ [0,1], [1,1], [2,2], [3,2] ]) # 4 x 2
rows = A3a1.shape[0] 
x_tb = 0
y_tb = 0
for i in range(rows):
    x_tb = x_tb + A3a1[i,0]  # 0 + 1 + 2 + 3 = 6
    y_tb = y_tb + A3a1[i,1]  # 1 + 1 + 2 + 2 = 6
x_tb = x_tb / rows # 6 / 4 = 1.5
y_tb = y_tb / rows # 6 / 4 = 1.5

m1 = 0
m2 = 0
for i in range(rows):
    m1 = m1 + (A3a1[i,0] - x_tb) * (A3a1[i,1] - y_tb)
    m2 = m2 + (A3a1[i,0] - x_tb) * (A3a1[i,0] - x_tb)
m = m1 / m2

b = y_tb - m * x_tb
# In pt đường thẳng cần tìm y = mx + b
x = symbols('x')
y = m*x + b
print("y =", y)

# Vẽ đồ thị mô phỏng
x1 = np.arange(0, 4, 0.01)
y1 = m*x1 + b
plt.plot(x1, y1, color = 'red')
plt.plot(0, 1, 'ko',  color = 'green')
plt.plot(1, 1, 'ko',  color = 'green')
plt.plot(2, 2, 'ko',  color = 'green')
plt.plot(3, 2, 'ko',  color = 'green')
plt.show()

print()

"""
# Cách 2
# Least Square solutions
# y = a0 + a1 * x
# -------------------------
# 1 = a0 + a1 * 0 với (0,1)
# 1 = a0 + a1 * 1 với (1,1)
# 2 = a0 + a1 * 2 với (2,2)
# 2 = a0 + a1 * 3 với (3,2)

# b = Ax; x = (a0, a1)
# Least Square Solutions
# Giải hệ PTTT: A^T * A * x = A^T * b => x = (A^T*A)^(-1) * A^T*b = (a0, a1) => y = a0 + a1*x
 
A3a2 = np.array([[1,0], [1,1], [1,2], [1,3]])
b3a2 = np.array([1,1,2,2])

transpose_A3a2 = np.transpose(A3a2)
transpose_A3a2_mul_A3a2 = transpose_A3a2.dot(A3a2)
transpose_A3a2_mul_b3a2 = transpose_A3a2.dot(b3a2)
x1 = np.linalg.solve(transpose_A3a2_mul_A3a2, transpose_A3a2_mul_b3a2)

x = symbols('x')
y1 = x1[0] + x1[1] * x
print("y =", y1)

# Vẽ đồ thị mô phỏng
x2 = np.arange(0, 4, 0.01)
y1p = x1[0] + x1[1] * x2
plt.plot(x2, y1p, color = 'red')

plt.plot(0, 1, 'ko',  color = 'green')
plt.plot(1, 1, 'ko',  color = 'green')
plt.plot(2, 2, 'ko',  color = 'green')
plt.plot(3, 2, 'ko',  color = 'green')
plt.show()

print()
"""

A3b = np.array([[1,1], [1,2], [1,4], [1,5]])
b3b = np.array([0,1,2,3])

transpose_A3b = np.transpose(A3b)
transpose_A3b_mul_A3b = transpose_A3b.dot(A3b)
transpose_A3b_mul_b3b = transpose_A3b.dot(b3b)
x1 = np.linalg.solve(transpose_A3b_mul_A3b, transpose_A3b_mul_b3b)

x = symbols('x')
y1 = x1[0] + x1[1] * x
print("y =", y1)

# Vẽ đồ thị mô phỏng
x2 = np.arange(0, 5, 0.01)
y1p = x1[0] + x1[1] * x2
plt.plot(x2, y1p, color = 'red')

plt.plot(1, 0, 'ko',  color = 'green')
plt.plot(2, 1, 'ko',  color = 'green')
plt.plot(4, 2, 'ko',  color = 'green')
plt.plot(5, 3, 'ko',  color = 'green')
plt.show()

print()

A3c = np.array([[1,-1], [1,0], [1,1], [1,2]])
b3c = np.array([0,1,2,4])

transpose_A3c = np.transpose(A3c)
transpose_A3c_mul_A3c = transpose_A3c.dot(A3c)
transpose_A3c_mul_b3c = transpose_A3c.dot(b3c)
x1 = np.linalg.solve(transpose_A3c_mul_A3c, transpose_A3c_mul_b3c)

x = symbols('x')
y1 = x1[0] + x1[1] * x
print("y =", y1)

# Vẽ đồ thị mô phỏng
x2 = np.arange(-2, 3, 0.01)
y1p = x1[0] + x1[1] * x2
plt.plot(x2, y1p, color = 'red')

plt.plot(-1, 0, 'ko',  color = 'green')
plt.plot(0, 1, 'ko',  color = 'green')
plt.plot(1, 2, 'ko',  color = 'green')
plt.plot(2, 4, 'ko',  color = 'green')
plt.show()

print()

A3d = np.array([[1,2], [1,3], [1,5], [1,6]])
b3d = np.array([3,2,1,0])

transpose_A3d = np.transpose(A3d)
transpose_A3d_mul_A3d = transpose_A3d.dot(A3d)
transpose_A3d_mul_b3d = transpose_A3d.dot(b3d)
x1 = np.linalg.solve(transpose_A3d_mul_A3d, transpose_A3d_mul_b3d)

x = symbols('x')
y1 = x1[0] + x1[1] * x
print("y =", y1)

# Vẽ đồ thị mô phỏng
x2 = np.arange(1, 7, 0.01)
y1p = x1[0] + x1[1] * x2
plt.plot(x2, y1p, color = 'red')

plt.plot(2, 3, 'ko',  color = 'green')
plt.plot(3, 2, 'ko',  color = 'green')
plt.plot(5, 1, 'ko',  color = 'green')
plt.plot(6, 0, 'ko',  color = 'green')
plt.show()

"""Exercise 4: An engineer is tracking the friction index over mileage of a breaking system of a vehicle. She
expects that the mileage-friction relationship is approximately linear and she collects five data points
that are show in the table below.
"""

import numpy as np
from matplotlib import pyplot as plt
from sympy import *

A4 = np.array([ [2,1], [6,1], [20,1], [30,1], [40,1] ])
b4 = np.array([20, 18, 10, 6, 2])

# least square solution find x = (a,b)
transpose_A4 = np.transpose(A4)
transpose_A4_mul_A4 = transpose_A4.dot(A4)
transpose_A4_mul_b4 = transpose_A4.dot(b4)
x4 = np.linalg.solve(transpose_A4_mul_A4, transpose_A4_mul_b4)
print("x = ", x4)

# Tìm hàm số y = ax + b
x = Symbol('x')
y4 = round(x4[0], 2) * x + round(x4[1], 2)
print("y =", y4)

# Vẽ đồ thị hs
x1 = np.arange(0,45, 0.01)
y4p = round(x4[0], 2) * x1 + round(x4[1], 2)
plt.plot(x1, y4p, color = 'blue')

plt.plot(2, 20, 'ko', color = 'red')
plt.plot(6, 18, 'ko', color = 'red')
plt.plot(20, 10, 'ko', color = 'red')
plt.plot(30, 6, 'ko', color = 'red')
plt.plot(40, 2, 'ko', color = 'red')

"""Exercise 5: A cetain experiment produces the data (1, 7.9),(2, 5.4) and (3, −9). Describe the model that produces a least squares fit of these points by a function of the form"""

import numpy as np
cos1 = np.cos(1)
cos2 = np.cos(2)
cos3 = np.cos(3)

sin1 = np.sin(1)
sin2 = np.sin(2)
sin3 = np.sin(3)

A5 = np.array([ [cos1,sin1], [cos2,sin2], [cos3,sin3] ])
b5 = np.array([7.9, 5.4, -9])

transpose_A5 = A5.T
transpose_A5_mul_A5 = transpose_A5.dot(A5)
transpose_A5_mul_b5 = transpose_A5.dot(b5)
x5 = np.linalg.solve(transpose_A5_mul_A5, transpose_A5_mul_b5)
print("x =", x5)

from matplotlib import pyplot as plt
from sympy import *
x1 = np.arange(0, 5, 0.01)
y5p = round(x5[0], 1) * np.cos(x1) + round(x5[1], 1) * np.sin(x1)
plt.plot(x1, y5p, color = 'blue')

plt.plot(1, 7.9, 'ko', color = 'red')
plt.plot(2, 5.4, 'ko', color = 'red')
plt.plot(3, -9, 'ko', color = 'red')

"""Exercise 6: A bioengineer is studying the growth of a genetically engineered bacteria culture and suspects that is it approximately follows a cubic model. He collects six data points that are show table below. He assumes the equation has the cubic form a*x^3 + b*x^2 + c*x + d = y."""

import numpy as np
from sympy import *
from matplotlib import pyplot as plt

# This give 6 equations with 4 unknowns:
# a + b + c + d = 2.1 with (x = 1, y = 2.1)
# 8a + 4b + 2c + d = 2.1 with (x = 2, y = 3.5)
# 27a + 9b + 3c + d = 2.1 with (x = 3, y = 4.2)
# 64a + 16b + 4c + d = 2.1 with (x = 4, y = 3.1)
# 125a + 25b + 5c + d = 2.1 with (x = 5, y = 4.4)
# 216a + 36b + 6c + d = 2.1 with (x = 6, y = 6.8)

# Dạng Ax = b => Least Square solutions: A^T * A * x = A^T * b => x = (A^T * A)^(-1) *(A^T * b)
# x = (x1, x2, x3, x4) = (a,b,c,d)
# Thế vào y = ax^3 + bx^2 + cx + d
# Vẽ, chọn vùng vẽ (0, 7, 0.01)

A6 = np.array([[1,1,1,1], [8,4,2,1], [27,9,3,1], [64,16,4,1], [125,25,5,1], [216,36,6,1]])
b6 = np.array([2.1, 3.5, 4.2, 3.1, 4.4, 6.8])

transpose_A6 = np.transpose(A6)
transpose_A6_mul_A6 = transpose_A6.dot(A6)
transpose_A6_mul_b6 = transpose_A6.dot(b6)
x6 = (np.linalg.inv(transpose_A6_mul_A6)).dot(transpose_A6_mul_b6)
print("x =", x6)

x = symbols('x')
y = x6[0] * x**3 + x6[1] * x**2 + x6[2] * x + x6[3]
print("y =", y)

x_val = np.arange(0, 7, 0.01)
y_val = x6[0] * x_val**3 + x6[1] * x_val**2 + x6[2] * x_val + x6[3]
plt.plot(x_val, y_val, color = 'red')

for i in range (1,7):
  plt.plot(i, b6[i-1], 'ko',  color = 'green')

"""Exercise 7:"""

import numpy as np 
from matplotlib import pyplot as plt
from sympy import *
# Hàm biến đổi tọa độ qua 2 tham số l = lambda, m = nuy
def Sxy(p, l, m):
  S = np.array([[l,0], [0,m]])
  Sp = S.dot(p)
  return Sp


A7 = np.array([3, -2])
print(Sxy(A7, 2, -1))
print("-----------------------")

# Kiểm thử với 2 điểm có tọa độ
p1 = np.array([1, 1])
p2 = np.array([1, -1])

# Câu a
l = m = 2
q1 = Sxy(p1, l, m)
q2 = Sxy(p2, l, m)
print(p1, '->', q1)
print(p2, '->', q2)

print()

# Câu b 
l = m = 0.5
q1 = Sxy(p1, l, m)
q2 = Sxy(p2, l, m)
print(p1, '->', q1)
print(p2, '->', q2)

print()

# Câu c
l = 1
m = -1
q1 = Sxy(p1, l, m)
q2 = Sxy(p2, l, m)
print(p1, '->', q1)
print(p2, '->', q2)

print()

# Câu d 
l = -1
m = 1
q1 = Sxy(p1, l, m)
q2 = Sxy(p2, l, m)
print(p1, '->', q1)
print(p2, '->', q2)

"""Exercise 8:"""

import numpy as np
from matplotlib import pyplot as plt
from sympy import *
def R(p, t):
  S = np.array([[np.cos(t), -np.sin(t)], [np.sin(t), np.cos(t)]])
  Sp = S.dot(p)
  return Sp

A8 = np.array([1,-1])

t1 = np.pi
A8p1 = R(A8, t1)
print(A8, '->', A8p1)

print()

t2 = np.pi / 3
A8p2 = R(A8, t2)
print(A8, '->', A8p2)

"""Exercise 9:

"""

import numpy as np
from matplotlib import pyplot as plt
from sympy import *

#Vẽ đường thẳng qua 2 điểm P1(x1,y1) và P2(x2,y2)
#x, y = [x1, x2], [y1, y2]
#plt.plot(x, y, marker = 'o')
def PlotLine(P1,P2):
    x, y = [P1[0], P2[0]], [P1[1], P2[1]]
    plt.plot(x, y, marker = 'o')

A = np.array([0,2])
B = np.array([1,3])
C = np.array([5,3])
D = np.array([6,2])
E = np.array([5,2])
F = np.array([5,0])
G = np.array([1,0])
H = np.array([1,2])

PlotLine(A,B)
PlotLine(B,C)
PlotLine(C,D)
PlotLine(D,E)
PlotLine(E,F)
PlotLine(F,G)
PlotLine(G,H)
PlotLine(H,A)

# Câu a: Translation with tx = 2 and ty = 6
def PlotTrans(P1,P2,tx,ty):
    x, y = [P1[0] + tx, P2[0] + tx], [P1[1] + ty, P2[1] + ty]
    plt.plot(x, y, marker = 'o')

dx = 2
dy = 6
PlotTrans(A,B,dx,dy)
PlotTrans(B,C,dx,dy)
PlotTrans(C,D,dx,dy)
PlotTrans(D,E,dx,dy)
PlotTrans(E,F,dx,dy)
PlotTrans(F,G,dx,dy)
PlotTrans(G,H,dx,dy)
PlotTrans(H,A,dx,dy)

# Câu b
def PlotRotation(P1, P2, alpha):
    # Cho tọa độ 2 điểm P1, P2, tìm P'1, P'2 qua góc quay alpha
    # x' = x * cos(t) - y * sin(t); y' = x * sin(t) + y * cos(t)
    x1 = P1[0] * cos(alpha) - P1[1] * sin(alpha)
    y1 = P1[0] * sin(alpha) + P1[1] * cos(alpha)
    
    x2 = P2[0] * cos(alpha) - P2[1] * sin(alpha)
    y2 = P2[0] * sin(alpha) + P2[1] * cos(alpha)
    x, y = [x1, x2], [y1, y2]
    plt.plot(x, y, marker = 'o')

t = pi/3
PlotRotation(A,B,t)
PlotRotation(B,C,t)
PlotRotation(C,D,t)
PlotRotation(D,E,t)
PlotRotation(E,F,t)
PlotRotation(F,G,t)
PlotRotation(G,H,t)
PlotRotation(H,A,t)

"""Exercise 10: Let P(1, 1), Q(3, 1), R(1, 3) are the vertices of a triangle, and matrix A represent the vertices of this triangle. Determine the image of the triangle P QR under the transformation (−I)A."""

import numpy as np
from matplotlib import pyplot as plt
from sympy import *

def PlotLine(P1, P2):
    x, y = [P1[0], P2[0]], [P1[1], P2[1]]
    plt.plot(x, y, marker = 'o')

A10 = np.array([[1,1], [3,1], [1,3]])
# (-I)*A => I phải là ma trận đơn vị 3x3
I3 = np.eye(3)
_IA = -(I3.dot(A10))

A = A10[0,:]
B = A10[1,:]
C = A10[2,:]

PlotLine(A,B)
PlotLine(B,C)
PlotLine(C,A)

A1 = _IA[0,:]
B1 = _IA[1,:]
C1 = _IA[2,:]

PlotLine(A1,B1)
PlotLine(B1,C1)
PlotLine(C1,A1)