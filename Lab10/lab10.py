# -*- coding: utf-8 -*-
"""Lab10.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZJTC0RAFjHFC4ylOvRol5X6RCbEFjTi3

Exercise 1: Find the eigenvalues of Then, compute the determinant of A, B, C, D, E matrix based on the eigenvalues.
"""

import numpy as np

def findDetThroughEigenValues(eval):
  product = 1
  for value in eval:
    product *= value
  return product

E1a = np.array([[-1, 3.5, 14], [0, 5, -26], [0, 0, 2]])
E1b = np.array([[-2, 0, 0], [99, 0, 0], [10, -4.5, 10]])
E1c = np.array([[5, 5, 0, 2], [0, 2, -3, 6], [0, 0, 3, 2], [0, 0, 0, 5]])
E1d = np.array([[3, 0, 0, 0], [6, 2, 0 , 0], [0, 3, 6, 0], [2, 3, 3, -5]])
E1e = np.array([[3, 0, 0, 0, 0], [-5, 1, 0, 0, 0], [3, 8, 0, 0, 0], [0, 7, 2, 1, 0], [-4, 1, 9, -2, 3]])

# Find the eigenvalues of A 
eval_E1a = np.linalg.eigvals(E1a)
print("The eigenvalues of A =", eval_E1a)
# Tính định thức bằng hàm DET
detA = np.linalg.det(E1a)
print("det(A) =", round(detA, 6))
# Tính định thức dựa vào trị riêng
print("det(A) =", findDetThroughEigenValues(eval_E1a))

print()

# Find the eigenvalues of B 
eval_E1b = np.linalg.eigvals(E1b)
print("The eigenvalues of B =", eval_E1b)
# Tính định thức bằng hàm DET
detB = np.linalg.det(E1b)
print("det(B) =", round(detB, 6))
# Tính định thức dựa vào trị riêng
print("det(B) =", findDetThroughEigenValues(eval_E1b))

print()

# Find the eigenvalues, eigenvectors of C
eval_E1c, vec_E1c = np.linalg.eig(E1c)
print("The eigenvalues of C =", eval_E1c)
print("The eigenvectors of C:")
print(vec_E1c)
# Tính định thức bằng hàm DET
detC = np.linalg.det(E1c)
print("det(C) =", round(detC, 6))
# Tính định thức dựa vào trị riêng
print("det(C) =", findDetThroughEigenValues(eval_E1c))

print()

# Find the eigenvalues, eigenvectors of D 
eval_E1d, vec_E1d = np.linalg.eig(E1d)
print("The eigenvalues of D =", eval_E1d)
print("The eigenvectors of D:")
print(vec_E1d)
# Tính định thức bằng hàm DET
detD = np.linalg.det(E1d)
print("det(D) =", round(detD, 6))
# Tính định thức dựa vào trị riêng
print("det(D) =", findDetThroughEigenValues(eval_E1d))

print()

# Find the eigenvalues, eigenvectors of E 
eval_E1e, vec_E1e = np.linalg.eig(E1e)
print("The eigenvalues of E =", eval_E1e)
print("The eigenvectors of E:")
print(vec_E1e)
# Tính định thức bằng hàm DET
detE = np.linalg.det(E1e)
print("det(E) =", round(detE, 6))
# Tính định thức dựa vào trị riêng
print("det(E) =", findDetThroughEigenValues(eval_E1e))

"""Exercise 2:"""

import numpy as np
from sympy import *
from matplotlib import pyplot as plt

A2 = np.array([ [-6, 28, 21], [4, -15, -12], [8, 0, 15] ])

a = np.array([32, 31.9, 31.8, 32.1, 32.2])
color = ['b', 'r', 'g', 'k', 'c', 'm']
t = symbols('t')
x = np.arange(0, 3, 0.05)
fig = plt.figure()
for i, alp in enumerate(a):
     B = A2
     B[2,1] = alp # Gán giá trị của a tại phần tử A[3,2] = B[3,2]
     evalB = np.linalg.eigvals(B)
     # Thiết lập vẽ đa thức đặc trưng p(t) = det(A - lamda * I) với 0 <= t <=3
     p = 1
     for j in range(len(evalB)):
         p = p * (evalB[j] - t) 
     y = lambdify(t, p, "numpy")(x)
     plt.plot(x, y, color[i])

"""Exercise 3:"""

import numpy as np

M = np.array([[-3, -5, -7], [-2, 1, 0], [1, 5, 5]])
eval_M = np.linalg.eigvals(M)
print("a) The eigenvalues of M =", eval_M)

eval_M, evec_M = np.linalg.eig(M)
print("The eigenvectors of M =")
print(evec_M)

print()

# D = P^(-1) * M * P
D3 = np.linalg.inv(evec_M) @ M @ evec_M
print("c) D = P^(-1) * M * P =")
print(D3)

"""Exercise 4:"""

import numpy as np

A4 = np.array([[-2,2,-3], [2,1,-6], [-1,-2,0]])
print("A =")
print(A4)
eigval_A4, eigvec_A4 = np.linalg.eig(A4)
print("The eigenvalues of A =", eigval_A4)
print("The eigenvectors of A:")
print(eigvec_A4)

print()

A4T = np.transpose(A4)
print("A4T =")
print(A4T)
eigval_A4T, eigvec_A4T = np.linalg.eig(A4T)
print("The eigenvalues of A4T =", eigval_A4T)
print("The eigenvectors of A4T:")
print(eigvec_A4T)

print()

A4_1 = np.linalg.inv(A4)
print("A4_1 =")
print(A4_1)
eigval_A4_1, eigvec_A4_1 = np.linalg.eig(A4_1)
print("The eigenvalues of A4_1 =", eigval_A4_1)
print("The eigenvectors of A4_1:")
print(eigvec_A4_1)

"""Exercise 5:"""

A5 = np.array([[4, -5], [2, -3]])
B5 = np.array([[0,2],[0,1]])
C5 = np.array([[2,3],[1,4]])
D5 = np.array([[1,2,-2],[-2,5,-2],[-6,6,-3]])

def Check_Diagonalizes(A):
    Val, Vec = np.linalg.eig(A)
    # Tính W = P^(-1)*A*P với P = vec tơ riêng của ma trận A
    W = np.linalg.inv(Vec) @ A @ Vec
    if np.all(W==Vec):
        print("P is diagonalizes A")
    else:
        print("P is not diagonalizes A")
Check_Diagonalizes(A5)
Check_Diagonalizes(B5)
Check_Diagonalizes(C5)
Check_Diagonalizes(D5)

"""Exercise 6:"""

import numpy as np

A6 = np.array([[1,2,-2], [0,3,-2], [0,0,1]])
eval_A6, evec_A6 = np.linalg.eig(A6)
print("The eigenvectors of A:")
print(evec_A6)

print()

# Tính W = P^(-1)*A*P với P = vec tơ riêng của ma trận A
W = np.linalg.inv(evec_A6) @ A6 @ evec_A6
print(W)

"""Exercise 7: Find the singular values of the matrices"""

import numpy as np

A7a = np.array([[1,0],[0,3]])
print("A7a=")
print(A7a)

print()

U7a, S7a, V7a = np.linalg.svd(A7a)
print("U7a=")
print(U7a)

print()

print("S7a=")
print(S7a)

print()

print("V7a=")
print(V7a)

print()

A7b = np.array([[5,0],[0,0]])
print("A7b=")
print(A7b)

print()

U7b, S7b, V7b = np.linalg.svd(A7b)
print("U7b=")
print(U7b)

print()

print("S7b=")
print(S7b)

print()

print("V7b=")
print(V7b)

print()

A7c = np.array([[np.sqrt(6),1],[0,np.sqrt(6)]])
print("A7c=")
print(A7c)

print()

U7c, S7c, V7c = np.linalg.svd(A7c)
print("U7c=")
print(U7c)

print()

print("S7c=")
print(S7c)

print()

print("V7c=")
print(V7c)

print()

A7d = np.array([[np.sqrt(3),2],[0,np.sqrt(3)]])
print("A7d=")
print(A7d)

print()

U7d, S7d, V7d = np.linalg.svd(A7d)
print("U7d=")
print(U7d)

print()

print("S7d=")
print(S7d)

print()

print("V7d=")
print(V7d)

print()

"""Exercise 8: Compute SVD of each matrix below"""

import numpy as np

B81 = np.array([[-18,13,-4,4], [2,19,-4,12], [-14,11,-12,8], [-2,21,4,8]])
print("B81=")
print(B81)

print()

U81, S81, V81 = np.linalg.svd(B81)
print("U81=")
print(U81)

print()

print("S81=")
print(S81)

print()

print("V81=")
print(V81)

print()

B82 = np.array([[6, -8,-4,5,-4], [2,7,-5,-6,4], [0,-1,-8,2,2], [-1,-2,4,4,-8]])
print("B82=")
print(B82)

print()

U82, S82, V82 = np.linalg.svd(B82)
print("U82=")
print(U82)

print()

print("S82=")
print(S82)

print()

print("V82=")
print(V82)